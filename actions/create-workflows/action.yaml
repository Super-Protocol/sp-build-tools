name: Create workflow
description: Create workflow with spctl tool and return created order numbers

inputs:
  spctl_config_file:
    description: Path to spctl config file
    default: ./config.json
  tee_offers:
    description: tee offers separated by comma (eg. 1,3)
    required: true
  base_image:
    description: Base image offer number
  solution:
    description: Solution offer number or path to file with solution resource
    required: true
  data:
    description: Data offer number or path to data resource file. If data several, separate by comma (103,./data-settings.json)
    required: true
  storage_offer:
    description: Storage offer number
    required: true
  previous_orders:
    description: Previous order numbers to cancel, separated by comma (eg. 100,102)
  min_rent_minutes:
    description: How long order should run
    default: '129600'

outputs:
  order_ids:
    description: Created order ids
    value: ${{ steps.create-workflows.outputs.order_ids }}

runs:
  using: composite
  steps:
    - name: Check spctl
      uses: Super-Protocol/sp-build-tools/actions/check-spctl@v1
      with:
        spctl_config_file: ${{ inputs.spctl_config_file }}

    - name: Validate input
      shell: bash
      run: |
        if [ ! "$(echo ${{ inputs.solution }} | grep -E '[0-9]')" ]; then
          if [ ! -f "${{ inputs.solution }}" ]; then
            echo "Error: File specified by inputs.solution does not exist."
            exit 1
          fi
        fi

        # Split inputs.data into an array using a comma as a separator
        IFS=',' read -ra data_items <<< "${{ inputs.data }}"

        # Loop through each item in the array
        for item in "${data_items[@]}"; do
          # Check if the item is a number
          if ! [[ "$item" =~ ^[0-9]+$ ]]; then
            # If it's not a number, check if it's a file path and if the file exists
            if [ ! -f "$item" ]; then
              echo "Error: File specified by inputs.data ($item) does not exist."
              exit 1
            fi
          fi
        done

    - name: Cancel previous orders
      shell: bash
      if: ${{ inputs.previous_orders != '' }}
      run: |
        # Split line like "order1,order2" by comma (,) and save orders to "orderIds" variable
        IFS=',' read -ra orderIds <<< "${{ inputs.previous_orders }}"

        for orderId in "${orderIds[@]}"; do
          echo "Cancelling order $orderId"
          ./spctl orders cancel $orderId --config ${{ inputs.spctl_config_file }} || true
        done

    - name: Create workflows
      id: create-workflows
      shell: bash
      run: |
        orderIds=()

        IFS=',' read -ra teeOfferIds <<< "${{ inputs.tee_offers }}"

        for teeOffer in "${teeOfferIds[@]}"; do
          COMMAND="./spctl workflows create --tee $teeOffer"

          if [ -n "${{ inputs.base_image }}" ]; then
            COMMAND="$COMMAND --solution ${{ inputs.base_image }}"
          fi

          COMMAND="$COMMAND --solution ${{ inputs.solution }}"

          # Split inputs.data into an array using a comma as a separator
          IFS=',' read -ra data_items <<< "${{ inputs.data }}"

          # Loop through each item in the array
          for item in "${data_items[@]}"; do
            # Append "--data $item" to the COMMAND variable for both numbers and file paths
            COMMAND="$COMMAND --data $item"
          done

          COMMAND="$COMMAND --storage ${{ inputs.storage_offer }} --orders-limit 10000 --min-rent-minutes ${{ inputs.min_rent_minutes }} --config ${{ inputs.spctl_config_file }} > workflow_result.txt"

          echo "COMMAND=$COMMAND"

          eval $COMMAND

          cat workflow_result.txt
          ORDER_ID=$(cat workflow_result.txt | grep -oP '\["\K\d+(?="\])') 

          orderIds+=($ORDER_ID)
        done

        ORDER_IDS=$(IFS=','; echo "${orderIds[*]}")

        echo "order_ids=$ORDER_IDS" >> $GITHUB_OUTPUT
